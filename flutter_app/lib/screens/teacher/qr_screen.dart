import 'dart:async';
import 'package:flutter/material.dart';
import 'package:qr_flutter/qr_flutter.dart';

class ShowQrPage extends StatefulWidget {
  final Map<String, dynamic> session;

  const ShowQrPage({super.key, required this.session});

  @override
  State<ShowQrPage> createState() => _ShowQrPageState();
}

class _ShowQrPageState extends State<ShowQrPage> {
  late String qrData;
  int remainingSeconds = 0;
  Timer? _timer;

  DateTime? _startTime;
  DateTime? _endTime;

  // ‚úÖ THAY ƒê·ªîI 1: Th√™m bi·∫øn tr·∫°ng th√°i
  String _statusMessage = "ƒêang t·∫£i...";

  @override
  void initState() {
    super.initState();
    print("--- M√ÄN H√åNH QR INIT ---"); // L·ªánh debug

    // L·∫•y token ho·∫∑c ID t·ª´ session
    qrData = widget.session['token']?.toString() ?? widget.session['id']?.toString() ?? '';


    // Ph√¢n t√≠ch th·ªùi gian
    _startTime = DateTime.tryParse(widget.session['start_at'] ?? '');
    _endTime = DateTime.tryParse(widget.session['end_at'] ?? '');

    // --- DEBUG ---
    // ‚úÖ Ki·ªÉm tra xem d·ªØ li·ªáu th·ªùi gian nh·∫≠n v√†o c√≥ ƒë√∫ng kh√¥ng
    print("start_at (raw): ${widget.session['start_at']}");
    print("end_at (raw): ${widget.session['end_at']}");
    print("Parsed _startTime: $_startTime");
    print("Parsed _endTime: $_endTime");
    // --- /DEBUG ---

    // N·∫øu kh√¥ng c√≥ th·ªùi gian h·ª£p l·ªá, d·ª´ng l·∫°i v√† b√°o l·ªói
    if (_startTime == null || _endTime == null) {
      print("L·ªñI: Th·ªùi gian start/end l√† null ho·∫∑c kh√¥ng h·ª£p l·ªá. Timer S·∫º KH√îNG ch·∫°y.");
      setState(() {
        _statusMessage = "L·ªói: Th·ªùi gian kh√¥ng h·ª£p l·ªá";
        remainingSeconds = 0;
      });
      return; // Quan tr·ªçng: Tho√°t ra
    }

    print("Th·ªùi gian h·ª£p l·ªá. ƒêang b·∫Øt ƒë·∫ßu timer...");

    // C·∫≠p nh·∫≠t th·ªùi gian l·∫ßn ƒë·∫ßu ti√™n
    _updateRemainingTime();

    // B·∫Øt ƒë·∫ßu timer v√† g·ªçi h√†m c·∫≠p nh·∫≠t m·ªói gi√¢y
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      _updateRemainingTime();
    });
  }

  /// ‚úÖ THAY ƒê·ªîI 2: C·∫≠p nh·∫≠t h√†m n√†y ƒë·ªÉ x·ª≠ l√Ω 3 tr·∫°ng th√°i
  void _updateRemainingTime() {
    // N·∫øu kh√¥ng c√≥ th·ªùi gian, d·ª´ng l·∫°i
    if (_startTime == null || _endTime == null) {
      _timer?.cancel();
      return;
    }

    final now = DateTime.now();

    if (now.isBefore(_startTime!)) {
      // --- TR∆Ø·ªúNG H·ª¢P 1: Phi√™n ch∆∞a b·∫Øt ƒë·∫ßu ---
      final diff = _startTime!.difference(now).inSeconds;
      setState(() {
        _statusMessage = "S·∫Øp b·∫Øt ƒë·∫ßu sau:"; // Thay ƒë·ªïi 1
        // Hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c T·ªöI L√öC B·∫ÆT ƒê·∫¶U
        remainingSeconds = diff > 0 ? diff : 0;
      });

    } else if (now.isAfter(_endTime!)) {
      // --- TR∆Ø·ªúNG H·ª¢P 3: Phi√™n ƒë√£ k·∫øt th√∫c ---
      setState(() {
        _statusMessage = "Phi√™n ƒë√£ k·∫øt th√∫c"; // Thay ƒë·ªïi 2
        remainingSeconds = 0;
      });
      _timer?.cancel();

      // Hi·ªÉn th·ªã th√¥ng b√°o v√† ƒë√≥ng trang
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Phi√™n ƒëi·ªÉm danh ƒë√£ k·∫øt th√∫c!')),
        );
        Navigator.pop(context);
      }

    } else {
      // --- TR∆Ø·ªúNG H·ª¢P 2: Phi√™n ƒëang di·ªÖn ra (logic ƒë·∫øm ng∆∞·ª£c) ---
      final diff = _endTime!.difference(now).inSeconds;
      setState(() {
        _statusMessage = "Th·ªùi gian c√≤n l·∫°i:"; // Thay ƒë·ªïi 3
        // Hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c T·ªöI L√öC K·∫æT TH√öC
        remainingSeconds = diff > 0 ? diff : 0;
      });
    }
  }

  @override
  void dispose() {
    print("--- M√ÄN H√åNH QR DISPOSE ---"); // L·ªánh debug
    _timer?.cancel();
    super.dispose();
  }

  // H√†m format th·ªùi gian (B·∫°n ƒë√£ c√≥)
  String formatDuration(int seconds) {
    final minutes = seconds ~/ 60;
    final sec = seconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${sec.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    final session = widget.session;

    return Scaffold(
      appBar: AppBar(
        title: Text("M√£ QR - ${session['course_name'] ?? 'Phi√™n ƒëi·ªÉm danh'}"),
        backgroundColor: Colors.deepPurpleAccent,
        foregroundColor: Colors.white,
        centerTitle: true,
      ),
      body: SafeArea(
        child: Center(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // üïí ƒê·∫øm ng∆∞·ª£c th·ªùi gian
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.deepPurpleAccent.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  // ‚úÖ THAY ƒê·ªîI 3: S·ª≠ d·ª•ng _statusMessage v√† h√†m formatDuration
                  child: Text(
                    "$_statusMessage ${formatDuration(remainingSeconds)}",
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.deepPurpleAccent,
                    ),
                  ),
                ),
                const SizedBox(height: 24),

                // üì± M√£ QR
                QrImageView(
                  data: qrData,
                  version: QrVersions.auto,
                  size: 260.0,
                  backgroundColor: Colors.white,
                ),
                const SizedBox(height: 24),

                // üîç Th√¥ng tin phi√™n
                Text(
                  "M√¥n h·ªçc: ${session['course_name'] ?? 'Kh√¥ng r√µ'}",
                  style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Text("Ph√≤ng h·ªçc: ${session['room'] ?? '‚Äî'}"),
                const SizedBox(height: 8),
                Text("L·ªõp h·ªçc: ${session['class_name'] ?? '‚Äî'}"),
                const SizedBox(height: 24),

                // ‚úÖ N√∫t k·∫øt th√∫c phi√™n th·ªß c√¥ng
                ElevatedButton.icon(
                  icon: const Icon(Icons.stop_circle),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.redAccent,
                    padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  onPressed: () {
                    _timer?.cancel();
                    Navigator.pop(context);
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Phi√™n ƒëi·ªÉm danh ƒë√£ k·∫øt th√∫c')),
                    );
                  },
                  label: const Text(
                    "K·∫øt th√∫c phi√™n ƒëi·ªÉm danh",
                    style: TextStyle(fontSize: 16, color: Colors.white),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
