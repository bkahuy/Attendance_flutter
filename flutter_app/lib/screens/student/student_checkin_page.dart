import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import '../../services/attendance_service.dart';

class StudentCheckinPage extends StatefulWidget {
  final Map<String, dynamic> session;
  final File photo;
  const StudentCheckinPage({super.key, required this.session,required this.photo,});

  @override
  State<StudentCheckinPage> createState() => _StudentCheckinPageState();
}

class _StudentCheckinPageState extends State<StudentCheckinPage> {
  String? status;
  String password = '';
  File? photo;
  bool sending = false;

  Future<void> _pickPhoto() async {
    final picker = ImagePicker();
    final img = await picker.pickImage(source: ImageSource.camera, maxWidth: 1280, imageQuality: 85,preferredCameraDevice: CameraDevice.front,);
    if (img != null) {
      setState(() {
        photo = File(img.path);
      });
    }
  }

  @override
  void initState() {
    super.initState();
    // G√°n ·∫£nh ƒë√£ ch·ª•p
    photo = widget.photo;
    // ƒê·∫∑t locale ƒë·ªÉ format ng√†y (v√≠ d·ª•: "Th 6")
    Intl.defaultLocale = 'vi_VN';
  }

  Future<void> _submit() async {
    if (status == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Vui l√≤ng ch·ªçn tr·∫°ng th√°i ƒëi·ªÉm danh')),
      );
      return;
    }

    String statusValue;
    switch (status) {
      case 'C√≥ m·∫∑t':
        statusValue = 'present';
        break;
      case 'Mu·ªôn':
        statusValue = 'late';
        break;
      case 'V·∫Øng':
        statusValue = 'absent';
        break;
      default:
        statusValue = 'present';
    }

    setState(() => sending = true);
    try {
      // üé® S·ª¨A L·ªñI (t·ª´ l·∫ßn tr∆∞·ªõc):
      // ƒê·∫£m b·∫£o 'session_id' ƒë∆∞·ª£c ki·ªÉm tra null v√† parse an to√†n
      final dynamic sessionId = widget.session['session_id'];
      if (sessionId == null) {
        throw Exception("Kh√¥ng t√¨m th·∫•y ID bu·ªïi h·ªçc (session_id is null).");
      }
      final int sessionIdAsInt = int.parse(sessionId.toString());

      // üé® GHI CH√ö DEBUG (t·ª´ l·∫ßn tr∆∞·ªõc):
      // Th√™m print ƒë·ªÉ ki·ªÉm tra l·ªói 422
      print("===== D·ªÆ LI·ªÜU G·ª¨I ƒêI (checkIn): =====");
      print("sessionId: $sessionIdAsInt");
      print("status: $statusValue");
      print("password: $password");
      print("photoFile exists: ${photo != null}");
      print("====================================");

      await AttendanceService().checkIn(
        sessionId: sessionIdAsInt,
        status: statusValue,
        password: password.isEmpty ? null : password,
        photoFile: photo,
      );

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('ƒêi·ªÉm danh th√†nh c√¥ng!')),
      );

      // Quay v·ªÅ trang tr∆∞·ªõc ƒë√≥
      Navigator.of(context).pop();
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('L·ªói ƒëi·ªÉm danh: $e')),
      );
    } finally {
      if (mounted) setState(() => sending = false);
    }
  }


  // üé® C·∫¨P NH·∫¨T: D√πng Row thay v√¨ ListTile ƒë·ªÉ c√≥ giao di·ªán g·ªçn (gi·ªëng ·∫£nh)
  Widget _buildRadioOption(String title) {
    return GestureDetector(
      onTap: () {
        setState(() {
          status = title;
        });
      },
      // B·ªçc trong Row ƒë·ªÉ radio v√† text s√°t nhau
      child: Row(
        mainAxisSize: MainAxisSize.min, // Gi·ªØ cho Row co l·∫°i
        children: [
          Radio<String>(
            value: title,
            groupValue: status,
            onChanged: (String? value) {
              setState(() {
                status = value;
              });
            },
            // Gi·∫£m padding m·∫∑c ƒë·ªãnh c·ªßa Radio
            visualDensity: VisualDensity.compact,
            materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
          ),
          Text(title),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final s = widget.session;
    final className = s['class_name'] ?? 'L·ªõp';
    final courseName = s['course_name'] ?? 'T√™n m√¥n h·ªçc';
    // final courseCode = s['course_code'] ?? 'M√£ m√¥n'; // üé® B·ªé (kh√¥ng c√≥ trong ·∫£nh)

    // üé® C·∫¨P NH·∫¨T: D√πng tryParse ƒë·ªÉ an to√†n h∆°n
    final sessionDate = DateTime.tryParse(s['date'] ?? '') ?? DateTime.now();

    // üé® C·∫¨P NH·∫¨T: Format "Th·ª©... dd/MM/yyyy"
    // (·∫¢nh d√πng "Fri" l√† ti·∫øng Anh, ta d√πng "vi_VN" s·∫Ω ra "T6" ho·∫∑c "Th·ª© 6")
    final formattedDate = DateFormat("E dd/MM/yyyy", "vi_VN").format(sessionDate);
    final photoName = photo == null ? '' : photo!.path.split('/').last;

    return Scaffold(
      // üé® C·∫¨P NH·∫¨T: AppBar
      appBar: AppBar(
        leading: const BackButton(color: Colors.white), // Icon back m√†u tr·∫Øng
        title: const Text(
          'M√°y ·∫£nh', // ƒê·ªïi ti√™u ƒë·ªÅ
          style: TextStyle(color: Colors.white), // Ch·ªØ m√†u tr·∫Øng
        ),
        backgroundColor: Colors.indigo.shade400, // N·ªÅn m√†u t√≠m
        elevation: 1, // Th√™m b√≥ng m·ªù
      ),

      // üé® C·∫¨P NH·∫¨T: N·ªÅn
      backgroundColor: Colors.white,

      // üîπ N·ªôi dung ch√≠nh
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),

        // üé® C·∫¨P NH·∫¨T: Card
        child: Container(
          decoration: BoxDecoration(
            color: Colors.grey[100], // M√†u x√°m r·∫•t nh·∫°t
            borderRadius: BorderRadius.circular(15),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 5,
                offset: const Offset(0, 2),
              )
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // üé® C·∫¨P NH·∫¨T: Th·ª© t·ª± (L·ªõp -> T√™n m√¥n)
                Text(
                  'L·ªõp $className',
                  style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Text(
                  courseName, // üé® B·ªè courseCode
                  style: TextStyle(fontSize: 16, color: Colors.grey[800]),
                ),
                const SizedBox(height: 16),

                // üé® C·∫¨P NH·∫¨T: H√†ng ng√†y th√°ng v√† t√™n ·∫£nh
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // Ng√†y th√°ng
                    Text(
                      formattedDate,
                      style: TextStyle(fontSize: 16, color: Colors.grey[800]),
                    ),
                    const SizedBox(width: 16),
                    // T√™n ·∫£nh (B·ªè IconButton)
                    Flexible(
                      child: Text(
                        photoName,
                        style:
                        TextStyle(fontSize: 14, color: Colors.grey[800]),
                        overflow: TextOverflow.ellipsis,
                        textAlign: TextAlign.right,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),

                // üé® C·∫¨P NH·∫¨T: D√πng widget _buildRadioOption ƒë√£ s·ª≠a
                _buildRadioOption('C√≥ m·∫∑t'),
                _buildRadioOption('Mu·ªôn'),
                _buildRadioOption('V·∫Øng'),

                const SizedBox(height: 16),
                const Text(
                  'Password:',
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 8),
                TextFormField(
                  onChanged: (v) => password = v,
                  obscureText: true,
                  decoration: InputDecoration(
                    filled: true,
                    fillColor: Colors.white,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(horizontal: 12),
                  ),
                ),
                const SizedBox(height: 24),

                // üé® C·∫¨P NH·∫¨T: CƒÉn l·ªÅ n√∫t "X√ÅC NH·∫¨N" sang ph·∫£i
                Align(
                  alignment: Alignment.centerRight,
                  child: ElevatedButton(
                    onPressed: sending ? null : _submit,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: Colors.black,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                      padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                    ),
                    child: sending
                        ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                        : const Text(
                      'X√ÅC NH·∫¨N',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}