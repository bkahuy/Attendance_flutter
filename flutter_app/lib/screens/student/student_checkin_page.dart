import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:geolocator/geolocator.dart';
import 'package:intl/intl.dart'; // Import th∆∞ vi·ªán intl
import '../../services/attendance_service.dart';

class StudentCheckinPage extends StatefulWidget {
  final Map<String, dynamic> session;
  const StudentCheckinPage({super.key, required this.session});

  @override
  State<StudentCheckinPage> createState() => _StudentCheckinPageState();
}

class _StudentCheckinPageState extends State<StudentCheckinPage> {
  // ƒê·ªïi status t·ª´ Dropdown th√†nh Radio button
  // Gi√° tr·ªã c√≥ th·ªÉ l√† 'C√≥ m·∫∑t', 'Mu·ªôn', 'V·∫Øng'
  String? status;
  String password = '';
  File? photo;
  Position? pos;
  bool sending = false;

  Future<void> _pickPhoto() async {
    // Ch·ª©c nƒÉng ch·ª•p ·∫£nh v·∫´n ƒë∆∞·ª£c gi·ªØ l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng ·ªü logic n·ªÅn
    final picker = ImagePicker();
    final img = await picker.pickImage(source: ImageSource.camera, maxWidth: 1280, imageQuality: 85,preferredCameraDevice: CameraDevice.front,);
    if (img != null) {
      setState(() {
        photo = File(img.path);
      });
    }
  }
  @override
  void initState() {
    super.initState();
    // N·∫øu ƒë√£ c√≥ ·∫£nh truy·ªÅn s·∫µn t·ª´ CourseDetailPage, g√°n lu√¥n
    if (widget.session['photo_path'] != null) {
      photo = File(widget.session['photo_path']);
    }
  }
  Future<void> _getLocation() async {
    final enabled = await Geolocator.isLocationServiceEnabled();
    if (!enabled) { await Geolocator.openLocationSettings(); return; }
    LocationPermission perm = await Geolocator.checkPermission();
    if (perm == LocationPermission.denied) perm = await Geolocator.requestPermission();
    if (perm == LocationPermission.deniedForever || perm == LocationPermission.denied) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Kh√¥ng c√≥ quy·ªÅn GPS')));
      return;
    }
    final p = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);
    setState(() => pos = p);
  }

  Future<void> _submit() async {
    if (status == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Vui l√≤ng ch·ªçn tr·∫°ng th√°i ƒëi·ªÉm danh')),
      );
      return;
    }

    // √Ånh x·∫° l·∫°i gi√° tr·ªã ƒë·ªÉ g·ª≠i ƒëi
    String statusValue;
    switch (status) {
      case 'C√≥ m·∫∑t':
        statusValue = 'present';
        break;
      case 'Mu·ªôn':
        statusValue = 'late';
        break;
      case 'V·∫Øng':
        statusValue = 'absent';
        break;
      default:
        statusValue = 'present';
    }

    // üëâ Ch·ªâ ch·ª•p ·∫£nh n·∫øu ch∆∞a c√≥
    if (photo == null) {
      await _pickPhoto();
      if (photo == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('B·∫°n ch∆∞a ch·ª•p ·∫£nh x√°c nh·∫≠n')),
        );
        return;
      }
    }

    await _getLocation();

    setState(() => sending = true);
    try {
      await AttendanceService().checkIn(
        sessionId: widget.session['session_id'] as int,
        status: statusValue,
        password: password.isEmpty ? null : password,
        lat: pos?.latitude,
        lng: pos?.longitude,
        photoFile: photo,
      );

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('ƒêi·ªÉm danh th√†nh c√¥ng!')),
      );

      // ‚úÖ Tr·ªü v·ªÅ trang chi ti·∫øt m√¥n h·ªçc v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
      Navigator.of(context).pop({
        'checkedIn': true,
        'status': statusValue,
      });
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('L·ªói ƒëi·ªÉm danh: $e')),
      );
    } finally {
      if (mounted) setState(() => sending = false);
    }
  }



  // Widget ri√™ng cho c√°c l·ª±a ch·ªçn Radio
  Widget _buildRadioOption(String title) {
    return ListTile(
      title: Text(title),
      leading: Radio<String>(
        value: title,
        groupValue: status,
        onChanged: (String? value) {
          setState(() {
            status = value;
          });
        },
      ),
      contentPadding: EdgeInsets.zero,
      onTap: () {
        setState(() {
          status = title;
        });
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final s = widget.session;
    final className = s['class_name'] ?? 'L·ªõp';
    final courseName = s['course_name'] ?? 'T√™n m√¥n h·ªçc';
    final courseCode = s['course_code'] ?? 'M√£ m√¥n';
    final sessionDate = DateTime.parse(s['date']);
    final formattedDate = DateFormat("E dd/MM/yyyy", "vi_VN").format(sessionDate);
    final photoName = photo == null ? '' : photo!.path.split('/').last;

    return Scaffold(
      appBar: AppBar(
        // Th√™m n√∫t Back (quay l·∫°i trang CourseDetail)
        leading: const BackButton(color: Colors.black),
        // ƒê·ªïi ti√™u ƒë·ªÅ cho r√µ r√†ng h∆°n
        title: const Text(
          'X√°c nh·∫≠n ƒëi·ªÉm danh',
          style: TextStyle(color: Colors.black),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),

      // üîπ N·ªôi dung ch√≠nh
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Card(
          color: const Color(0xFFE0E0E0),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
          elevation: 0,
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'L·ªõp $className',
                  style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Text(
                  '$courseCode $courseName',
                  style: TextStyle(fontSize: 16, color: Colors.grey[800]),
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // Ng√†y th√°ng
                    Flexible(
                      flex: 3,
                      child: Text(
                        formattedDate,
                        style: TextStyle(fontSize: 16, color: Colors.grey[800]),
                      ),
                    ),
                    const SizedBox(width: 16),
                    // T√™n ·∫£nh v√† N√∫t ch·ª•p l·∫°i
                    Flexible(
                      flex: 4, // Cho nhi·ªÅu kh√¥ng gian h∆°n
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.end, // ƒê·∫©y sang ph·∫£i
                        children: [
                          // T√™n file (linh ho·∫°t)
                          Flexible(
                            child: Text(
                              photoName,
                              style: TextStyle(
                                  fontSize: 14, color: Colors.grey[800]),
                              overflow: TextOverflow.ellipsis, // Ch·ªëng tr√†n text
                              textAlign: TextAlign.right,
                            ),
                          ),
                          // N√∫t "Quay l·∫°i Camera" (Ch·ª•p l·∫°i)
                          IconButton(
                            icon: const Icon(Icons.camera_alt_outlined),
                            color: Colors.grey[900],
                            tooltip: 'Ch·ª•p l·∫°i',
                            onPressed: _pickPhoto, // G·ªçi l·∫°i h√†m ch·ª•p ·∫£nh
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),

                _buildRadioOption('C√≥ m·∫∑t'),
                _buildRadioOption('Mu·ªôn'),
                _buildRadioOption('V·∫Øng'),

                const SizedBox(height: 16),
                const Text(
                  'Password:',
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 8),
                TextFormField(
                  onChanged: (v) => password = v,
                  obscureText: true,
                  decoration: InputDecoration(
                    filled: true,
                    fillColor: Colors.white,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(horizontal: 12),
                  ),
                ),
                const SizedBox(height: 24),
                Center(
                  child: ElevatedButton(
                    onPressed: sending ? null : _submit,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: Colors.black,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                      padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                    ),
                    child: sending
                        ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                        : const Text(
                      'X√ÅC NH·∫¨N',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

}