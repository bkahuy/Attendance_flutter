import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:intl/intl.dart';
import 'dart:io';

import '../../api/api_client.dart';
import '../../utils/config.dart';

// üé® M·ªöI: Ch·ªâ import FaceScan v√† CheckinPage
// (ƒê√£ x√≥a QrScanPage v√† StudentCheckinLoadingPage)
import 'face_scan_page.dart';
import 'student_checkin_page.dart';

class CourseDetailPage extends StatefulWidget {
  final Map<String, dynamic> course;
  const CourseDetailPage({super.key, required this.course});

  @override
  State<CourseDetailPage> createState() => _CourseDetailPageState();
}

class _CourseDetailPageState extends State<CourseDetailPage> {
  List<Map<String, dynamic>> _history = [];
  bool _isLoading = true;
  String? _error;

  @override
  void initState() {
    super.initState();
    Intl.defaultLocale = 'vi_VN';
    _loadHistory();
  }

  /// üîπ G·ªçi API ƒë·ªÉ l·∫•y l·ªãch s·ª≠ ƒëi·ªÉm danh
  Future<void> _loadHistory() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      final classSectionId = widget.course['class_section_id'];
      if (classSectionId == null) {
        throw Exception("Thi·∫øu class_section_id");
      }

      final res = await ApiClient().dio.get(
        "${AppConfig.BASE_URL}${AppConfig.studentHistoryPath}/$classSectionId/attendance",
      );

      if (mounted) {
        setState(() {
          _history = (res.data['data'] as List)
              .map((e) => e as Map<String, dynamic>)
              .toList();
          _isLoading = false;
        });
      }
    } on DioException catch (e) {
      if (mounted) {
        setState(() {
          _error = e.response?.data.toString() ?? e.message;
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _error = e.toString();
          _isLoading = false;
        });
      }
    }
  }

  // üé® M·ªöI: H√†m x·ª≠ l√Ω quy tr√¨nh (Flow) qu√©t m·∫∑t
  // (B·ªè qua ho√†n to√†n QR v√† Loading Page)
  Future<void> _startFaceScanFlow(Map<String, dynamic> session) async {
    print("===== D·ªÆ LI·ªÜU BU·ªîI H·ªåC (SESSION): $session =====");
    if (!mounted) return;

    // 1. M·ªü trang Qu√©t M·∫∑t (ƒë√¢y l√† "m√°y ·∫£nh")
    final File? facePhoto = await Navigator.push<File>(
      context,
      MaterialPageRoute(
        builder: (_) => const FaceScanPage(),
      ),
    );
    if (facePhoto == null || !mounted) return; // Ng∆∞·ªùi d√πng b·∫•m back

    // 2. T·∫†O D·ªÆ LI·ªÜU BU·ªîI H·ªåC (SESSION DATA) M·ªöI
    // L·∫•y th√¥ng tin chung c·ªßa M√îN H·ªåC (t·ª´ widget.course)
    // v√† tr·ªôn v·ªõi th√¥ng tin c·ªßa BU·ªîI H·ªåC (t·ª´ session)
    final Map<String, dynamic> sessionData = {
      // D·ªØ li·ªáu t·ª´ M√îN H·ªåC (widget.course)
      'course_name': widget.course['course_name'],
      'class_name': widget.course['class_name'],
      'course_code': widget.course['course_code'],

      // D·ªØ li·ªáu t·ª´ BU·ªîI H·ªåC (session l·∫•y t·ª´ _history)
      'date': session['date'],
      'status': session['status'],

      // Key ƒë√∫ng (theo log) l√† 'session_id'
      'session_id': session['session_id'],
    };

    // 3. M·ªü th·∫≥ng trang StudentCheckinPage
    //    (B·ªè qua StudentCheckinLoadingPage)
    //    Ch√∫ng ta d√πng 'await' ƒë·ªÉ ch·ªù trang n√†y ƒë√≥ng l·∫°i
    await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => StudentCheckinPage(
          session: sessionData, // Truy·ªÅn d·ªØ li·ªáu ƒë√£ tr·ªôn
          photo: facePhoto,
        ),
      ),
    );

    // 4. T·∫£i l·∫°i l·ªãch s·ª≠ ƒë·ªÉ c·∫≠p nh·∫≠t "C√≥ m·∫∑t"
    //    (Sau khi trang StudentCheckinPage ƒë√≥ng l·∫°i)
    await _loadHistory();
  }


  /// üîπ T√≠nh to√°n s·ªë li·ªáu th·ªëng k√™
  int get totalSessions => _history.length;
  int get attendedSessions => _history.where((s) {
    return s['status'] == 'present' || s['status'] == 'late';
  }).length;

  /// üîπ ƒê·ªãnh d·∫°ng ng√†y th√°ng
  String _formatDate(DateTime date) {
    final dayOfWeek = DateFormat('EEEE').format(date);
    final dayMonthYear = DateFormat('dd/MM/yy').format(date);
    return '$dayOfWeek - $dayMonthYear';
  }

  /// üîπ C·∫¨P NH·∫¨T: Widget hi·ªÉn th·ªã tr·∫°ng th√°i
  //   (Gi·ªù ƒë√¢y nh·∫≠n 'session' thay v√¨ 'status')
  Widget _buildStatusWidget(Map<String, dynamic> session, DateTime date) {
    final now = DateTime.now();
    final isToday = DateUtils.isSameDay(date, now);
    final status = session['status']; // L·∫•y status t·ª´ session

    switch (status) {
      case 'present':
        return const Text(
          "C√≥ m·∫∑t",
          style: TextStyle(color: Colors.black, fontSize: 16),
        );
      case 'late':
        return const Text(
          "Tr·ªÖ",
          style: TextStyle(
              color: Colors.orange, fontSize: 16, fontWeight: FontWeight.bold),
        );
      case 'absent':
        return const Text(
          "V·∫Øng",
          style: TextStyle(
              color: Colors.red, fontSize: 16, fontWeight: FontWeight.bold),
        );

      case 'pending':
      default:
        if (isToday) {
          // 1. "ƒêI·ªÇM DANH" (Button)
          return TextButton(
            // üé® M·ªöI: G·ªçi h√†m _startFaceScanFlow v√† truy·ªÅn 'session'
            onPressed: () => _startFaceScanFlow(session),
            style: TextButton.styleFrom(
              padding: EdgeInsets.zero,
              minimumSize: const Size(50, 30),
              tapTargetSize: MaterialTapTargetSize.shrinkWrap,
              alignment: Alignment.centerRight,
            ),
            child: const Text(
              "ƒêI·ªÇM DANH",
              style: TextStyle(
                  color: Colors.red, fontSize: 16, fontWeight: FontWeight.bold),
            ),
          );
        } else if (date.isAfter(now)) {
          // 2. N·∫øu l√† ng√†y t∆∞∆°ng lai -> "?"
          return const Text(
            "?",
            style: TextStyle(color: Colors.black, fontSize: 16),
          );
        } else {
          // 3. N·∫øu l√† ng√†y trong qu√° kh·ª© -> "V·∫Øng"
          return Text(
            "V·∫Øng",
            style: TextStyle(
                color: Colors.red.shade700,
                fontSize: 16,
                fontWeight: FontWeight.normal),
          );
        }
    }
  }

  @override
  Widget build(BuildContext context) {
    final String courseName = widget.course['course_name'] ?? 'Chi ti·∫øt m√¥n h·ªçc';
    final String className = widget.course['class_name'] ?? '--';

    return Scaffold(
      // --- 1. APP BAR ---
      appBar: AppBar(
        title: const Text("Trang ch·ªß"),
        backgroundColor: Colors.deepPurpleAccent,
        foregroundColor: Colors.white,
        elevation: 1,
      ),

      // --- 2. N·ªÄN TR·∫ÆNG ---
      backgroundColor: Colors.white,
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [

          // --- 3. TH·∫∫ TH√îNG TIN M√îN H·ªåC ---
          Container(
            width: double.infinity,
            margin: const EdgeInsets.fromLTRB(16, 16, 16, 16),
            padding: const EdgeInsets.all(20.0),
            decoration: BoxDecoration(
              color: Colors.grey[100],
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 5,
                  offset: const Offset(0, 2),
                )
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  courseName,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  "L·ªõp: $className",
                  style: TextStyle(fontSize: 16, color: Colors.grey[800]),
                ),
                const SizedBox(height: 16),

                // --- 4. DANH S√ÅCH L·ªäCH S·ª¨ (B√äN TRONG TH·∫∫) ---
                _buildHistoryList(),
              ],
            ),
          ),

          // --- 5. TH·ªêNG K√ä (·ªû D∆Ø·ªöI C√ôNG) ---
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Divider(),
                const SizedBox(height: 16),
                if (!_isLoading && _error == null) ...[
                  Text(
                    "S·ªë bu·ªïi ƒë√£ ƒëi·ªÉm danh: $attendedSessions/$totalSessions",
                    style: const TextStyle(fontSize: 16, color: Colors.black87),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    "T·ªïng s·ªë bu·ªïi: $totalSessions",
                    style: const TextStyle(fontSize: 16, color: Colors.black87),
                  ),
                ] else if (_isLoading) ...[
                  const Text("ƒêang t·∫£i th·ªëng k√™...",
                      style: TextStyle(fontSize: 16, color: Colors.grey)),
                ]
              ],
            ),
          ),

          const Spacer(),
        ],
      ),
    );
  }

  /// üîπ Widget hi·ªÉn th·ªã danh s√°ch (loading, error, data)
  Widget _buildHistoryList() {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              "L·ªói t·∫£i l·ªãch s·ª≠: $_error",
              style: const TextStyle(color: Colors.red),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            ElevatedButton(
              onPressed: _loadHistory,
              child: const Text("Th·ª≠ l·∫°i"),
            )
          ],
        ),
      );
    }

    if (_history.isEmpty) {
      return const Center(child: Text("Ch∆∞a c√≥ bu·ªïi ƒëi·ªÉm danh n√†o."));
    }

    return ListView.separated(
      itemCount: _history.length,
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      separatorBuilder: (context, index) =>
      const SizedBox(height: 20),
      itemBuilder: (context, index) {
        // üé® M·ªöI: L·∫•y to√†n b·ªô 'session'
        final session = _history[index];
        final sessionDate = DateTime.tryParse(session['date'] ?? '');
        if (sessionDate == null) return const SizedBox.shrink();

        return Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            // Ng√†y th√°ng
            Text(
              _formatDate(sessionDate),
              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
            ),
            // Tr·∫°ng th√°i
            // üé® M·ªöI: Truy·ªÅn to√†n b·ªô 'session'
            _buildStatusWidget(
              session,
              sessionDate,
            ),
          ],
        );
      },
    );
  }
}