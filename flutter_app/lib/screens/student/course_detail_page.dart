import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:intl/intl.dart';

import '../../api/api_client.dart';
import '../../utils/config.dart';

class CourseDetailPage extends StatefulWidget {
  // D·ªØ li·ªáu m√¥n h·ªçc ƒë∆∞·ª£c truy·ªÅn t·ª´ trang StudentHome
  final Map<String, dynamic> course;

  const CourseDetailPage({super.key, required this.course});

  @override
  State<CourseDetailPage> createState() => _CourseDetailPageState();
}

class _CourseDetailPageState extends State<CourseDetailPage> {
  List<Map<String, dynamic>> _history = [];
  bool _isLoading = true;
  String? _error;

  @override
  void initState() {
    super.initState();
    // C·∫ßn thi·∫øt l·∫≠p locale 'vi_VN' ƒë·ªÉ DateFormat
    // c√≥ th·ªÉ hi·ªÉn th·ªã "Th·ª© Hai", "Th·ª© Ba"...
    Intl.defaultLocale = 'vi_VN';
    _loadHistory();
  }

  /// üîπ G·ªçi API ƒë·ªÉ l·∫•y l·ªãch s·ª≠ ƒëi·ªÉm danh
  Future<void> _loadHistory() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      final classSectionId = widget.course['class_section_id'];
      if (classSectionId == null) {
        throw Exception("Thi·∫øu class_section_id");
      }

      // API route: /api/student/class-sections/123/attendance
      final res = await ApiClient().dio.get(
        "${AppConfig.BASE_URL}${AppConfig.studentHistoryPath}/$classSectionId/attendance",
      );

      if (mounted) {
        setState(() {
          _history = (res.data['data'] as List)
              .map((e) => e as Map<String, dynamic>)
              .toList();
          _isLoading = false;
        });
      }
    } on DioException catch (e) {
      if (mounted) {
        setState(() {
          _error = e.response?.data.toString() ?? e.message;
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _error = e.toString();
          _isLoading = false;
        });
      }
    }
  }

  /// üîπ T√≠nh to√°n s·ªë li·ªáu th·ªëng k√™
  int get totalSessions => _history.length;
  int get attendedSessions => _history.where((s) {
    return s['status'] == 'present' || s['status'] == 'late';
  }).length;

  /// üîπ ƒê·ªãnh d·∫°ng ng√†y th√°ng (vd: "Th·ª© Hai - 13/10/25")
  String _formatDate(DateTime date) {
    // 'EEEE' s·∫Ω cho ra "Th·ª© Hai", "Th·ª© Ba"... (nh·ªù defaultLocale = 'vi_VN')
    final dayOfWeek = DateFormat('EEEE').format(date);
    final dayMonthYear = DateFormat('dd/MM/yy').format(date);
    return '$dayOfWeek - $dayMonthYear';
  }

  /// üîπ C·∫¨P NH·∫¨T: Widget hi·ªÉn th·ªã tr·∫°ng th√°i (theo ·∫£nh m·ªõi)
  Widget _buildStatusWidget(String status, DateTime date) {
    final now = DateTime.now();
    // Ch·ªâ so s√°nh ng√†y (b·ªè qua gi·ªù)
    final isToday = DateUtils.isSameDay(date, now);

    switch (status) {
      case 'present':
        return const Text(
          "C√≥ m·∫∑t",
          style: TextStyle(color: Colors.black, fontSize: 16),
        );
      case 'late':
        return const Text(
          "Tr·ªÖ", // Gi·ªØ l·∫°i logic n√†y
          style: TextStyle(
              color: Colors.orange, fontSize: 16, fontWeight: FontWeight.bold),
        );
      case 'absent':
        return const Text(
          "V·∫Øng", // Gi·ªØ l·∫°i logic n√†y
          style: TextStyle(
              color: Colors.red, fontSize: 16, fontWeight: FontWeight.bold),
        );

    // Logic cho "ƒêI·ªÇM DANH", "?", v√† "V·∫Øng" (n·∫øu qu√° h·∫°n)
      case 'pending':
      default:
        if (isToday) {
          // 1. N·∫øu l√† h√¥m nay -> "ƒêI·ªÇM DANH"
          return const Text(
            "ƒêI·ªÇM DANH",
            style: TextStyle(
                color: Colors.red, fontSize: 16, fontWeight: FontWeight.bold),
          );
        } else if (date.isAfter(now)) {
          // 2. N·∫øu l√† ng√†y t∆∞∆°ng lai -> "?"
          return const Text(
            "?",
            style: TextStyle(color: Colors.black, fontSize: 16),
          );
        } else {
          // 3. N·∫øu l√† ng√†y trong qu√° kh·ª© (ƒë√£ qua) -> "V·∫Øng"
          return Text(
            "V·∫Øng",
            style: TextStyle(
                color: Colors.red.shade700,
                fontSize: 16,
                fontWeight: FontWeight.normal),
          );
        }
    }
  }

  @override
  Widget build(BuildContext context) {
    // L·∫•y th√¥ng tin tƒ©nh t·ª´ 'widget.course' (do API l·ªãch h·ªçc tr·∫£ v·ªÅ)
    final String courseName = widget.course['course_name'] ?? 'Chi ti·∫øt m√¥n h·ªçc';
    final String className = widget.course['class_name'] ?? '--';

    return Scaffold(
      // C·∫¨P NH·∫¨T: AppBar
      appBar: AppBar(
        title: const Text("Trang ch·ªß"),
        backgroundColor: Colors.white,
        elevation: 0, // B·ªè b√≥ng
        foregroundColor: Colors.black, // M√†u ch·ªØ/icon
      ),
      // C·∫¨P NH·∫¨T: M√†u n·ªÅn
      backgroundColor: Colors.white,
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // C·∫¨P NH·∫¨T: Th·∫ª th√¥ng tin m√¥n h·ªçc (theo ·∫£nh)
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16.0),
            margin: const EdgeInsets.fromLTRB(16, 0, 16, 16), // Th√™m margin
            decoration: BoxDecoration(
              color: Colors.grey[200], // M√†u n·ªÅn x√°m
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  courseName, // D·ªØ li·ªáu n√†y L·∫§Y T·ª™ VIEW
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  "L·ªõp: $className", // D·ªØ li·ªáu n√†y L·∫§Y T·ª™ VIEW
                  style: TextStyle(fontSize: 16, color: Colors.grey[800]),
                ),
              ],
            ),
          ),

          // C·∫¨P NH·∫¨T: Danh s√°ch l·ªãch s·ª≠ ƒëi·ªÉm danh
          Expanded(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              // T√°ch ri√™ng widget ƒë·ªÉ x·ª≠ l√Ω loading/error/data
              child: _buildHistoryList(),
            ),
          ),

          // C·∫¨P NH·∫¨T: Th·ªëng k√™ (ƒë·∫∑t ·ªü d∆∞·ªõi c√πng)
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Divider(),
                const SizedBox(height: 16),
                // Ch·ªâ hi·ªÉn th·ªã khi load xong v√† kh√¥ng l·ªói
                if (!_isLoading && _error == null) ...[
                  Text(
                    "S·ªë bu·ªïi ƒë√£ ƒëi·ªÉm danh: $attendedSessions/$totalSessions",
                    style: const TextStyle(fontSize: 16),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    "T·ªïng s·ªë bu·ªïi: $totalSessions",
                    style: const TextStyle(fontSize: 16),
                  ),
                ] else if (_isLoading) ...[
                  // Hi·ªÉn th·ªã placeholder khi ƒëang load
                  const Text("ƒêang t·∫£i th·ªëng k√™...",
                      style: TextStyle(fontSize: 16, color: Colors.grey)),
                ]
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// üîπ Widget hi·ªÉn th·ªã danh s√°ch (loading, error, data)
  Widget _buildHistoryList() {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              "L·ªói t·∫£i l·ªãch s·ª≠: $_error",
              style: const TextStyle(color: Colors.red),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            ElevatedButton(
              onPressed: _loadHistory,
              child: const Text("Th·ª≠ l·∫°i"),
            )
          ],
        ),
      );
    }

    if (_history.isEmpty) {
      return const Center(child: Text("Ch∆∞a c√≥ bu·ªïi ƒëi·ªÉm danh n√†o."));
    }

    // C·∫¨P NH·∫¨T: Hi·ªÉn th·ªã danh s√°ch (kh√¥ng b·ªçc trong Card)
    return ListView.separated(
      itemCount: _history.length,
      separatorBuilder: (context, index) =>
      const SizedBox(height: 20), // TƒÉng kho·∫£ng c√°ch
      itemBuilder: (context, index) {
        final session = _history[index];
        final sessionDate = DateTime.parse(session['date']);

        return Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            // Ng√†y th√°ng
            Text(
              _formatDate(sessionDate),
              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            // Tr·∫°ng th√°i
            _buildStatusWidget(
              session['status'],
              sessionDate,
            ),
          ],
        );
      },
    );
  }
}